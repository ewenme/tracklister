{"version":3,"sources":["tracklist.js","track-no-toggle.js","clipboard.js","about.js","app.js","file-parsers.js","index.js"],"names":["TrackLayout","props","rows","track_data","map","row","index","className","key","artist","track","list_style","track_numbers","Tracklist","id","TrackNoToggle","defaultChecked","icons","onChange","toggleTrackNumbers","Clipboard","tracks","track_no_status","useClipboard","join","successDuration","isCopied","setCopied","onClick","About","trigger","modal","close","href","App","state","acceptedFiles","onDrop","forEach","file","extension","name","split","pop","toLowerCase","reader","FileReader","onabort","console","log","onerror","onload","binaryStr","result","parser","xml2js","Parser","parseString","resultObject","collection_entries","ENTRY","collection_data","step","length","location_info","push","ARTIST","TITLE","label","LABEL","location","VOLUME","DIR","FILE","playlist_type","$","TYPE","playlist_entries","playlist_data","KEY","track_no","played","PLAYEDPUBLIC","tracklist_data","concat","reduce","m","o","set","Object","assign","get","Map","values","sort","a","b","parseFloat","filter","obj","parseNML","setState","data_split","shift","parseText","readAsText","this","bind","accept","multiple","getRootProps","getInputProps","isDragActive","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ea43f299.chunk.js","sourcesContent":["import React from \"react\";\n\nconst TrackLayout = props => {\n  const rows = props.track_data.map((row, index) => {\n    return (\n      <li className=\"pt-4\" key={index}>\n        <span className=\"track-artist\">\n          <b>{row.artist}</b>{\" \"}\n        </span>\n        <br />\n        <span className=\"track-title\">\n          <small>{row.track}</small>\n        </span>\n      </li>\n    );\n  });\n\n  const list_style = props.track_numbers ? \"list-decimal\" : \"list-none\";\n\n  return <ol className={\"list-inside \" + list_style}>{rows}</ol>;\n};\n\nfunction Tracklist(props) {\n\n    return (\n      <div id=\"tracklist\" className=\"text-right\">\n        <TrackLayout track_data={props.track_data} track_numbers={props.track_numbers} />\n      </div>\n    );\n}\n\nexport default Tracklist;\n","import React from \"react\";\nimport Toggle from \"react-toggle\";\n\nfunction TrackNoToggle(props) {\n\n    return (\n      <label className=\"flex flex-row\">\n        <Toggle\n          id=\"track-no-status\"\n          defaultChecked={props.track_numbers}\n          icons={false}\n          onChange={props.toggleTrackNumbers}\n        />\n        <span className=\"pl-2\">track numbers</span>\n      </label>\n    );\n}\n\nexport default TrackNoToggle;\n","import React from \"react\";\nimport useClipboard from \"react-use-clipboard\";\n\nfunction tracksAsString(tracks, track_no_status) {\n  const rows = tracks.map((row, index) => {\n    if (track_no_status) {\n      return index + 1 + \". \" + row.artist + \" - \" + row.track;\n    } else {\n      return row.artist + \" - \" + row.track;\n    }\n  });\n  return rows.join(\"\\n\");\n}\n\nfunction Clipboard(props) {\n\n  const [isCopied, setCopied] = useClipboard(\n    tracksAsString(props.track_data, props.track_numbers), {\n      successDuration: 1000,\n    }\n    );\n\n    return (\n          <button className=\"bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded shadow\" onClick={setCopied}>\n            {isCopied ? \"copied! üëç\" : \"copy to clipboard\"}\n            </button>\n    );\n}\n\nexport default Clipboard;\n","import React from \"react\";\nimport Popup from \"reactjs-popup\";\n\nfunction About() {\n    return (\n      <Popup\n        trigger={\n          <button className=\"bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded shadow\" id=\"about\">\n            {\" \"}\n            about / help{\" \"}\n          </button>\n        }\n        modal\n      >\n        {close => (\n          <div className=\"modal\">\n            <div className=\"prose lg:prose-xl\">\n            <h2> about / help </h2>\n              {\" \"}\n              <p>\n              A simple app to turn .txt files exported from{\" \"}\n              <a href=\"https://rekordbox.com/en/\">Rekordbox</a> and .nml files\n              exported from{\" \"}\n              <a href=\"https://en.wikipedia.org/wiki/Traktor\">Traktor</a> into\n              beautiful tracklists. source code on{\" \"}\n              <a href=\"https://github.com/ewenme/tracklister\">Github</a>.\n              </p>\n              <p>\n              <a href=\"https://ewen6.typeform.com/to/meXt691B\">Feedback welcome :]</a>\n              </p>\n              <p>\n              <a href=\"https://github.com/ewenme/tracklister\">PRs also welcome, this is open source !</a>\n              </p>\n              <h4>Rekordbox support</h4>\n              <p>\n              Any playlist can be exported from Rekordbox by right-clicking,\n              selecting \"Export a playlist to a file\", then \"Export a playlist\n              to a file for KUVO (*.txt)\". Note that history files can be\n              exported in the same way - find them under the \"Histories\" tab\n              inside the explorer pane.\n              </p>\n              <h4>Traktor support</h4>\n              <p>\n              Any playlist can be exported from Traktor by right-clicking, then\n              selecting \"Export Playlist\", and ensuring \"NML\" filetype is\n              active. Traktor also exports all sessions as .nml history files -\n              see{\" \"}\n              <a href=\"https://support.native-instruments.com/hc/en-us/articles/210274225-What-Files-and-Folders-does-TRAKTOR-Install-on-my-System-\">\n                this article\n              </a>{\" \"}\n              for more info.\n              </p>\n            </div>\n            <div className=\"flex flex-row justify-end\">\n              <button\n                className=\"bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded shadow\"\n                onClick={() => {\n                  close();\n                }}\n              >\n                close\n              </button>\n            </div>\n          </div>\n        )}\n      </Popup>\n    );\n}\n\nexport default About;\n","import React, { Component } from \"react\";\nimport Dropzone from \"react-dropzone\";\nimport Tracklist from \"./tracklist\";\nimport TrackNoToggle from \"./track-no-toggle\";\nimport Clipboard from \"./clipboard\";\nimport About from \"./about.js\";\nimport {parseNML, parseText} from \"./file-parsers\";\n\nclass App extends Component {\n  state = {\n    acceptedFiles: [],\n    track_data: [],\n    track_numbers: true\n  };\n  constructor() {\n    super();\n    this.onDrop = acceptedFiles => {\n      acceptedFiles.forEach(file => {\n        let extension = file.name\n          .split(\".\")\n          .pop()\n          .toLowerCase();\n\n          const reader = new FileReader();\n          reader.onabort = () => console.log(\"file reading was aborted\");\n          reader.onerror = () => console.log(\"file reading has failed\");\n          reader.onload = () => {\n\n          const binaryStr = reader.result;\n\n          if (extension === \"nml\") {\n          let tracks = parseNML(binaryStr);\n          this.setState({\n            track_data: tracks\n          });\n        } else if (extension === \"txt\") {\n            let tracks = parseText(binaryStr)\n            this.setState({\n              track_data: tracks\n            });\n          };\n        }\n          reader.readAsText(file);\n      },\n      this.setState({\n        acceptedFiles: acceptedFiles\n      }))\n    }\n  };\n  \n\n  toggleTrackNumbers() {\n    this.setState({\n      track_numbers: !this.state.track_numbers\n    });\n  }\n\n  render() {\n    const { track_data, track_numbers } = this.state;\n\n    return (\n      <div className=\"container mx-auto h-screen\">\n        <div className=\"flex justify-center items-center\">\n          <div className=\"flex-grow\">\n          <h1 className=\"text-6xl\"> tracklister </h1>\n          </div>\n        <div className=\"flex flex-row justify-end items-center space-x-4\">\n        <TrackNoToggle\n            track_numbers={this.state.track_numbers}\n            toggleTrackNumbers={this.toggleTrackNumbers.bind(this)}\n          />\n        <Clipboard track_data={track_data} track_numbers={track_numbers} />\n        <About></About>\n        </div>\n        </div>\n        <div className=\"flex h-full pt-4\">\n        <div className=\"flex-none p-2 border-2 border-black\">\n          <Dropzone onDrop={this.onDrop} accept=\".nml, .txt\" multiple={false}>\n            {({ getRootProps, getInputProps, isDragActive }) => (\n              <div className=\"flex h-full\" {...getRootProps({})}>\n                <input {...getInputProps()} />\n                {isDragActive\n                  ? \"click here or drag a file to upload\"\n                  : \"click here or drag a file to upload\"}\n              </div>\n            )}\n          </Dropzone>\n          </div>\n          <div className=\"flex-grow space-x-2 items-end\">\n          <Tracklist track_data={track_data} track_numbers={track_numbers} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import xml2js from \"xml2js\";\n\nfunction parseNML(file) {\n\n        const parser = new xml2js.Parser();\n        parser.parseString(file);\n        // extract collection metadata\n        const result = parser.resultObject;\n\n        const collection_entries = result[\"NML\"][\"COLLECTION\"][0].ENTRY;\n\n        // extract track metadata\n        let collection_data = [];\n\n        for (let step = 0; step < collection_entries.length; step++) {\n          let location_info = collection_entries[step][\"LOCATION\"][0][\"$\"];\n\n          collection_data.push({\n            artist: collection_entries[step][\"$\"].ARTIST,\n            track: collection_entries[step][\"$\"].TITLE,\n            label: collection_entries[step][\"INFO\"][0][\"$\"].LABEL,\n            location:\n              location_info.VOLUME + location_info.DIR + location_info.FILE\n          });\n        }\n\n        // establish playlist type\n        const playlist_type =\n          result[\"NML\"][\"PLAYLISTS\"][0][\"NODE\"][0][\"SUBNODES\"][0][\n            \"NODE\"\n          ][0][\"PLAYLIST\"][0].$.TYPE;\n\n        // extract playlist metadata\n        const playlist_entries =\n          result[\"NML\"][\"PLAYLISTS\"][0][\"NODE\"][0][\"SUBNODES\"][0][\n            \"NODE\"\n          ][0][\"PLAYLIST\"][0].ENTRY;\n\n        let playlist_data = [];\n\n        if (playlist_type === \"PROTOCOL\") {\n          for (let step = 0; step < playlist_entries.length; step++) {\n            playlist_data.push({\n              location: playlist_entries[step][\"PRIMARYKEY\"][0][\"$\"].KEY,\n              track_no: step,\n              played:\n                playlist_entries[step][\"EXTENDEDDATA\"][0][\"$\"].PLAYEDPUBLIC\n            });\n          }\n        } else if (playlist_type === \"LIST\") {\n          for (let step = 0; step < playlist_entries.length; step++) {\n            playlist_data.push({\n              location: playlist_entries[step][\"PRIMARYKEY\"][0][\"$\"].KEY,\n              track_no: step,\n              played: \"1\"\n            });\n          }\n        }\n\n        // merge collection/playlist info\n        let tracklist_data = [\n          ...collection_data\n            .concat(playlist_data)\n            .reduce(\n              (m, o) =>\n                m.set(\n                  o.location,\n                  Object.assign(m.get(o.location) || {}, o)\n                ),\n              new Map()\n            )\n            .values()\n        ];\n\n        tracklist_data.sort(\n          (a, b) => parseFloat(a.track_no) - parseFloat(b.track_no)\n        );\n\n        // remove tracks that weren't actually played\n        let played_tracks = tracklist_data.filter(function(obj) {\n          return obj.played === \"1\";\n        });\n\n        return played_tracks;\n}\n\nfunction parseText(file) {\n\n  let data_lines = file.split(\"\\n\");\n\n  const data_formed = data_lines.map(index => {\n    return index.split(\"\\t\");\n  });\n\n  const data_split = data_formed.filter(index => index.length === 11);\n\n  data_split.shift();\n\n  let tracks = [];\n\n  for (let step = 0; step < data_split.length; step++) {\n    tracks.push({\n      artist: data_split[step][3],\n      track: data_split[step][2],\n      track_no: step\n    });\n  }\n\n  return tracks;\n}\n\nexport {parseNML, parseText}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./app\";\nimport \"./index.css\";\nimport \"typeface-work-sans\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}