{"version":3,"sources":["tracklist.js","dark-toggle.js","track-no-toggle.js","clipboard.js","app.js","index.js"],"names":["TrackLayout","props","rows","track_data","map","row","index","key","class","artist","track","list_style","track_numbers","style","listStyleType","Tracklist","initialState","copied","state","this","id","Component","DarkModeToggle","darkMode","useDarkMode","defaultChecked","onChange","Fragment","icons","htmlFor","value","toggle","TrackNoToggle","toggleTrackNumbers","Clipboard","tracks","track_no_status","text","join","onCopy","setState","App","acceptedFiles","onDrop","forEach","file","reader","FileReader","onabort","console","log","onerror","onload","binaryStr","result","parser","xml2js","Parser","parseString","resultObject","collection_entries","ENTRY","collection_data","step","length","location_info","push","ARTIST","TITLE","label","LABEL","location","VOLUME","DIR","FILE","playlist_type","$","TYPE","playlist_entries","playlist_data","KEY","track_no","played","PLAYEDPUBLIC","tracklist_data","concat","reduce","m","o","set","Object","assign","get","Map","values","sort","a","b","parseFloat","played_tracks","filter","obj","readAsText","className","accept","multiple","getRootProps","getInputProps","isDragActive","bind","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.187c149d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nconst TrackLayout = props => {\n  const rows = props.track_data.map((row, index) => {\n    return (\n      <li key={index}>\n        <span class=\"track-artist\">\n          <b>{row.artist}</b>{\" \"}\n        </span>\n        <br />\n        <span class=\"track-title\">\n          <small>{row.track}</small>\n        </span>\n      </li>\n    );\n  });\n\n  const list_style = props.track_numbers ? \"decimal\" : \"none\";\n\n  return <ol style={{ listStyleType: list_style }}>{rows}</ol>;\n};\n\nclass Tracklist extends Component {\n  constructor(props) {\n    super(props);\n\n    this.initialState = {\n      track_data: this.props.track_data,\n      copied: false\n    };\n\n    this.state = this.initialState;\n  }\n  render() {\n    const { track_data, track_numbers } = this.props;\n\n    return (\n      <div id=\"tracklist\">\n        <TrackLayout track_data={track_data} track_numbers={track_numbers} />\n      </div>\n    );\n  }\n}\n\nexport default Tracklist;\n","import React from \"react\";\nimport useDarkMode from \"use-dark-mode\";\nimport Toggle from \"react-toggle\";\n\nconst DarkModeToggle = () => {\n  const darkMode = useDarkMode(true);\n\n  const ToggleControl = ({ defaultChecked, onChange }) => (\n    <React.Fragment>\n      <Toggle\n        id=\"dark-status\"\n        defaultChecked={defaultChecked}\n        icons={false}\n        onChange={onChange}\n      />\n      <label htmlFor=\"dark-status\">Dark mode</label>\n    </React.Fragment>\n  );\n\n  return (\n    <ToggleControl defaultChecked={darkMode.value} onChange={darkMode.toggle} />\n  );\n};\n\nexport default DarkModeToggle;\n","import React, { Component } from \"react\";\nimport Toggle from \"react-toggle\";\n\nclass TrackNoToggle extends Component {\n  constructor(props) {\n    super(props);\n\n    this.initialState = {\n      track_numbers: this.props.track_numbers\n    };\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Toggle\n          id=\"track-no-status\"\n          defaultChecked={this.props.track_numbers}\n          icons={false}\n          onChange={this.props.toggleTrackNumbers}\n        />\n        <label htmlFor=\"track-no-status\">Track numbers</label>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default TrackNoToggle;\n","import React, { Component } from \"react\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\n\nclass Clipboard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.initialState = {\n      copied: false,\n      track_numbers: this.props.track_numbers\n    };\n\n    this.state = this.initialState;\n  }\n  render() {\n    function tracksAsString(tracks, track_no_status) {\n      const rows = tracks.map((row, index) => {\n        if (track_no_status) {\n          return index + 1 + \". \" + row.artist + \" - \" + row.track;\n        } else {\n          return row.artist + \" - \" + row.track;\n        }\n      });\n      return rows.join(\"\\n\");\n    }\n\n    return (\n      <React.Fragment>\n        <CopyToClipboard\n          text={tracksAsString(this.props.track_data, this.props.track_numbers)}\n          onCopy={() => this.setState({ copied: true })}\n        >\n          <button class=\"square-button\">Copy to clipboard</button>\n        </CopyToClipboard>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Clipboard;\n","import React, { Component } from \"react\";\nimport Dropzone from \"react-dropzone\";\nimport xml2js from \"xml2js\";\nimport Tracklist from \"./tracklist\";\nimport DarkModeToggle from \"./dark-toggle\";\nimport TrackNoToggle from \"./track-no-toggle\";\nimport Clipboard from \"./clipboard\";\n\nclass App extends Component {\n  state = {\n    acceptedFiles: [],\n    track_data: [],\n    track_numbers: false\n  };\n  constructor() {\n    super();\n    this.onDrop = acceptedFiles => {\n      acceptedFiles.forEach(file => {\n        const reader = new FileReader();\n\n        reader.onabort = () => console.log(\"file reading was aborted\");\n        reader.onerror = () => console.log(\"file reading has failed\");\n        reader.onload = () => {\n          const binaryStr = reader.result;\n          const parser = new xml2js.Parser();\n          parser.parseString(binaryStr);\n          // extract collection metadata\n          const result = parser.resultObject;\n\n          const collection_entries = result[\"NML\"][\"COLLECTION\"][0].ENTRY;\n\n          // extract track metadata\n          let collection_data = [];\n\n          for (let step = 0; step < collection_entries.length; step++) {\n            let location_info = collection_entries[step][\"LOCATION\"][0][\"$\"];\n\n            collection_data.push({\n              artist: collection_entries[step][\"$\"].ARTIST,\n              track: collection_entries[step][\"$\"].TITLE,\n              label: collection_entries[step][\"INFO\"][0][\"$\"].LABEL,\n              location:\n                location_info.VOLUME + location_info.DIR + location_info.FILE\n            });\n          }\n\n          // establish playlist type\n          const playlist_type =\n            result[\"NML\"][\"PLAYLISTS\"][0][\"NODE\"][0][\"SUBNODES\"][0][\"NODE\"][0][\n              \"PLAYLIST\"\n            ][0].$.TYPE;\n\n          // extract playlist metadata\n          const playlist_entries =\n            result[\"NML\"][\"PLAYLISTS\"][0][\"NODE\"][0][\"SUBNODES\"][0][\"NODE\"][0][\n              \"PLAYLIST\"\n            ][0].ENTRY;\n\n          let playlist_data = [];\n\n          if (playlist_type === \"PROTOCOL\") {\n            for (let step = 0; step < playlist_entries.length; step++) {\n              playlist_data.push({\n                location: playlist_entries[step][\"PRIMARYKEY\"][0][\"$\"].KEY,\n                track_no: step,\n                played:\n                  playlist_entries[step][\"EXTENDEDDATA\"][0][\"$\"].PLAYEDPUBLIC\n              });\n            }\n          } else if (playlist_type === \"LIST\") {\n            for (let step = 0; step < playlist_entries.length; step++) {\n              playlist_data.push({\n                location: playlist_entries[step][\"PRIMARYKEY\"][0][\"$\"].KEY,\n                track_no: step,\n                played: \"1\"\n              });\n            }\n          }\n\n          // merge collection/playlist info\n          let tracklist_data = [\n            ...collection_data\n              .concat(playlist_data)\n              .reduce(\n                (m, o) =>\n                  m.set(o.location, Object.assign(m.get(o.location) || {}, o)),\n                new Map()\n              )\n              .values()\n          ];\n\n          tracklist_data.sort(\n            (a, b) => parseFloat(a.track_no) - parseFloat(b.track_no)\n          );\n\n          // remove tracks that weren't actually played\n          let played_tracks = tracklist_data.filter(function(obj) {\n            return obj.played === \"1\";\n          });\n\n          this.setState({\n            track_data: played_tracks\n          });\n        };\n        reader.readAsText(file);\n      });\n      this.setState({\n        acceptedFiles: acceptedFiles\n      });\n    };\n  }\n\n  toggleTrackNumbers() {\n    this.setState({\n      track_numbers: !this.state.track_numbers\n    });\n  }\n\n  render() {\n    const { track_data, track_numbers } = this.state;\n\n    return (\n      <div className=\"container\">\n        <Dropzone onDrop={this.onDrop} accept=\".nml\" multiple={false}>\n          {({ getRootProps, getInputProps, isDragActive }) => (\n            <section>\n              <div {...getRootProps({ className: \"dropzone\" })}>\n                <input {...getInputProps()} />\n                {isDragActive\n                  ? \"stop, drop!\"\n                  : \"click here or drag a file to upload\"}\n              </div>\n              <TrackNoToggle\n                track_numbers={this.state.track_numbers}\n                toggleTrackNumbers={this.toggleTrackNumbers.bind(this)}\n              />\n              <DarkModeToggle />\n              <Clipboard\n                track_data={track_data}\n                track_numbers={track_numbers}\n              />\n            </section>\n          )}\n        </Dropzone>\n        <Tracklist track_data={track_data} track_numbers={track_numbers} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./app\";\nimport \"./index.css\";\nimport \"./custom.css\";\nimport \"typeface-work-sans\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}