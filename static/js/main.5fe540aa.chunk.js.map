{"version":3,"sources":["tracklist.js","dark-toggle.js","track-no-toggle.js","clipboard.js","screenshot.js","colour-picker.js","about.js","app.js","file-parsers.js","index.js"],"names":["TrackLayout","props","rows","track_data","map","row","index","key","className","artist","track","list_style","track_numbers","style","listStyleType","Tracklist","id","DarkModeToggle","darkMode","useDarkMode","onClick","Fragment","icons","toggle","TrackNoToggle","defaultChecked","onChange","toggleTrackNumbers","Clipboard","tracks","track_no_status","useClipboard","join","successDuration","isCopied","setCopied","Screenshot","input","document","getElementById","domtoimage","toBlob","then","blob","filesaver","saveAs","this","printDocument","Component","ColourPicker","handleChangeComplete","colour","event","body","backgroundColor","hex","onChangeComplete","About","trigger","modal","close","href","console","log","App","state","acceptedFiles","onDrop","forEach","file","extension","name","split","pop","toLowerCase","reader","FileReader","onabort","onerror","onload","binaryStr","result","parser","xml2js","Parser","parseString","resultObject","collection_entries","ENTRY","collection_data","step","length","location_info","push","ARTIST","TITLE","label","LABEL","location","VOLUME","DIR","FILE","playlist_type","$","TYPE","playlist_entries","playlist_data","KEY","track_no","played","PLAYEDPUBLIC","tracklist_data","concat","reduce","m","o","set","Object","assign","get","Map","values","sort","a","b","parseFloat","filter","obj","parseNML","setState","data_split","shift","parseText","readAsText","accept","multiple","getRootProps","getInputProps","isDragActive","bind","ReactDOM","render"],"mappings":"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","file":"static/js/main.5fe540aa.chunk.js","sourcesContent":["import React from \"react\";\n\nconst TrackLayout = props => {\n  const rows = props.track_data.map((row, index) => {\n    return (\n      <li key={index}>\n        <span className=\"track-artist\">\n          <b>{row.artist}</b>{\" \"}\n        </span>\n        <br />\n        <span className=\"track-title\">\n          <small>{row.track}</small>\n        </span>\n      </li>\n    );\n  });\n\n  const list_style = props.track_numbers ? \"decimal\" : \"none\";\n\n  return <ol style={{ listStyleType: list_style }}>{rows}</ol>;\n};\n\nfunction Tracklist(props) {\n\n    return (\n      <div id=\"tracklist\">\n        <TrackLayout track_data={props.track_data} track_numbers={props.track_numbers} />\n      </div>\n    );\n}\n\nexport default Tracklist;\n","import React from \"react\";\nimport useDarkMode from \"use-dark-mode\";\n\nconst DarkModeToggle = () => {\n  const darkMode = useDarkMode(false);\n\n  const ToggleControl = ({ onClick }) => (\n    <React.Fragment>\n      <button\n        className=\"muted-button\"\n        id=\"dark-status\"\n        icons={false}\n        onClick={onClick}\n      >\n        toggle text colour\n      </button>\n    </React.Fragment>\n  );\n\n  return <ToggleControl onClick={darkMode.toggle} />;\n};\n\nexport default DarkModeToggle;\n","import React from \"react\";\nimport Toggle from \"react-toggle\";\n\nfunction TrackNoToggle(props) {\n\n    return (\n      <label>\n        <Toggle\n          id=\"track-no-status\"\n          defaultChecked={props.track_numbers}\n          icons={false}\n          onChange={props.toggleTrackNumbers}\n        />\n        <span className=\"label-text\">track numbers</span>\n      </label>\n    );\n}\n\nexport default TrackNoToggle;\n","import React from \"react\";\nimport useClipboard from \"react-use-clipboard\";\n\nfunction tracksAsString(tracks, track_no_status) {\n  const rows = tracks.map((row, index) => {\n    if (track_no_status) {\n      return index + 1 + \". \" + row.artist + \" - \" + row.track;\n    } else {\n      return row.artist + \" - \" + row.track;\n    }\n  });\n  return rows.join(\"\\n\");\n}\n\nfunction Clipboard(props) {\n\n  const [isCopied, setCopied] = useClipboard(\n    tracksAsString(props.track_data, props.track_numbers), {\n      successDuration: 1000,\n    }\n    );\n\n    return (\n          <button className=\"muted-button\" onClick={setCopied}>\n            {isCopied ? \"copied! üëç\" : \"copy to clipboard\"}\n            </button>\n    );\n}\n\nexport default Clipboard;\n","import React, { Component } from \"react\";\nimport domtoimage from \"dom-to-image\";\nimport filesaver from \"file-saver\";\n\nclass Screenshot extends Component {\n  printDocument() {\n    const input = document.getElementById(\"tracklist\");\n\n    domtoimage.toBlob(input).then(function(blob) {\n      filesaver.saveAs(blob, \"my-tracklist.png\");\n    });\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <button className=\"muted-button\" onClick={this.printDocument}>\n          take a screenshot\n        </button>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Screenshot;\n","import React, { Component } from \"react\";\nimport { CompactPicker } from \"react-color\";\n\nclass ColourPicker extends Component {\n  handleChangeComplete = (colour, event) => {\n    document.body.style.backgroundColor = colour.hex;\n  };\n\n  render() {\n    return (\n      <div className={\"bodyCol\"}>\n        <CompactPicker onChangeComplete={this.handleChangeComplete} />\n      </div>\n    );\n  }\n}\n\nexport default ColourPicker;\n","import React from \"react\";\nimport Popup from \"reactjs-popup\";\n\nfunction About() {\n    return (\n      <Popup\n        trigger={\n          <button className=\"muted-button\" id=\"about\">\n            {\" \"}\n            about / help{\" \"}\n          </button>\n        }\n        modal\n      >\n        {close => (\n          <div className=\"modal\">\n            <a href=\"/\" className=\"close\" onClick={close}>\n              &times;\n            </a>\n            <div className=\"header\"> about / help </div>\n            <div className=\"content\">\n              {\" \"}\n              A simple app to turn .txt files exported from{\" \"}\n              <a href=\"https://rekordbox.com/en/\">Rekordbox</a> and .nml files\n              exported from{\" \"}\n              <a href=\"https://en.wikipedia.org/wiki/Traktor\">Traktor</a> into\n              beautiful tracklists. Built with{\" \"}\n              <a href=\"https://reactjs.org/\">React</a>. Made by{\" \"}\n              <a href=\"https://twitter.com/ewen_\">@ewen_</a>, source code on{\" \"}\n              <a href=\"https://github.com/ewenme/tracklister\">Github</a>.\n              <h5>Rekordbox support</h5>\n              Any playlist can be exported from Rekordbox by right-clicking,\n              selecting \"Export a playlist to a file\", then \"Export a playlist\n              to a file for KUVO (*.txt)\". Note that history files can be\n              exported in the same way - find them under the \"Histories\" tab\n              inside the explorer pane.\n              <h5>Traktor support</h5>\n              Any playlist can be exported from Traktor by right-clicking, then\n              selecting \"Export Playlist\", and ensuring \"NML\" filetype is\n              active. Traktor also exports all sessions as .nml history files -\n              see{\" \"}\n              <a href=\"https://support.native-instruments.com/hc/en-us/articles/210274225-What-Files-and-Folders-does-TRAKTOR-Install-on-my-System-\">\n                this article\n              </a>{\" \"}\n              for more info.\n            </div>\n            <div className=\"actions\">\n              <button\n                className=\"muted-button\"\n                onClick={() => {\n                  console.log(\"modal closed \");\n                  close();\n                }}\n              >\n                close\n              </button>\n            </div>\n          </div>\n        )}\n      </Popup>\n    );\n}\n\nexport default About;\n","import React, { Component } from \"react\";\nimport Dropzone from \"react-dropzone\";\nimport Tracklist from \"./tracklist\";\nimport DarkModeToggle from \"./dark-toggle\";\nimport TrackNoToggle from \"./track-no-toggle\";\nimport Clipboard from \"./clipboard\";\nimport Screenshot from \"./screenshot\";\nimport ColourPicker from \"./colour-picker\";\nimport About from \"./about.js\";\nimport {parseNML, parseText} from \"./file-parsers\";\n\nclass App extends Component {\n  state = {\n    acceptedFiles: [],\n    track_data: [],\n    track_numbers: true\n  };\n  constructor() {\n    super();\n    this.onDrop = acceptedFiles => {\n      acceptedFiles.forEach(file => {\n        let extension = file.name\n          .split(\".\")\n          .pop()\n          .toLowerCase();\n\n          const reader = new FileReader();\n          reader.onabort = () => console.log(\"file reading was aborted\");\n          reader.onerror = () => console.log(\"file reading has failed\");\n          reader.onload = () => {\n\n          const binaryStr = reader.result;\n\n          if (extension === \"nml\") {\n          let tracks = parseNML(binaryStr);\n          this.setState({\n            track_data: tracks\n          });\n        } else if (extension === \"txt\") {\n            let tracks = parseText(binaryStr)\n            this.setState({\n              track_data: tracks\n            });\n          };\n        }\n          reader.readAsText(file);\n      },\n      this.setState({\n        acceptedFiles: acceptedFiles\n      }))\n    }\n  };\n  \n\n  toggleTrackNumbers() {\n    this.setState({\n      track_numbers: !this.state.track_numbers\n    });\n  }\n\n  render() {\n    const { track_data, track_numbers } = this.state;\n\n    return (\n      <div className=\"container\">\n        <div className=\"top-bar\">\n          <About></About>\n          <Dropzone onDrop={this.onDrop} accept=\".nml, .txt\" multiple={false}>\n            {({ getRootProps, getInputProps, isDragActive }) => (\n              <div {...getRootProps({ className: \"dropzone\" })}>\n                <input {...getInputProps()} />\n                {isDragActive\n                  ? \"stop, drop!\"\n                  : \"click here or drag a file to upload\"}\n              </div>\n            )}\n          </Dropzone>\n        </div>\n        <section>\n          <Clipboard track_data={track_data} track_numbers={track_numbers} />\n          <Screenshot></Screenshot>\n          <DarkModeToggle />\n          <ColourPicker />\n          <TrackNoToggle\n            track_numbers={this.state.track_numbers}\n            toggleTrackNumbers={this.toggleTrackNumbers.bind(this)}\n          />\n        </section>\n\n        <Tracklist track_data={track_data} track_numbers={track_numbers} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import xml2js from \"xml2js\";\n\nfunction parseNML(file) {\n\n        const parser = new xml2js.Parser();\n        parser.parseString(file);\n        // extract collection metadata\n        const result = parser.resultObject;\n\n        const collection_entries = result[\"NML\"][\"COLLECTION\"][0].ENTRY;\n\n        // extract track metadata\n        let collection_data = [];\n\n        for (let step = 0; step < collection_entries.length; step++) {\n          let location_info = collection_entries[step][\"LOCATION\"][0][\"$\"];\n\n          collection_data.push({\n            artist: collection_entries[step][\"$\"].ARTIST,\n            track: collection_entries[step][\"$\"].TITLE,\n            label: collection_entries[step][\"INFO\"][0][\"$\"].LABEL,\n            location:\n              location_info.VOLUME + location_info.DIR + location_info.FILE\n          });\n        }\n\n        // establish playlist type\n        const playlist_type =\n          result[\"NML\"][\"PLAYLISTS\"][0][\"NODE\"][0][\"SUBNODES\"][0][\n            \"NODE\"\n          ][0][\"PLAYLIST\"][0].$.TYPE;\n\n        // extract playlist metadata\n        const playlist_entries =\n          result[\"NML\"][\"PLAYLISTS\"][0][\"NODE\"][0][\"SUBNODES\"][0][\n            \"NODE\"\n          ][0][\"PLAYLIST\"][0].ENTRY;\n\n        let playlist_data = [];\n\n        if (playlist_type === \"PROTOCOL\") {\n          for (let step = 0; step < playlist_entries.length; step++) {\n            playlist_data.push({\n              location: playlist_entries[step][\"PRIMARYKEY\"][0][\"$\"].KEY,\n              track_no: step,\n              played:\n                playlist_entries[step][\"EXTENDEDDATA\"][0][\"$\"].PLAYEDPUBLIC\n            });\n          }\n        } else if (playlist_type === \"LIST\") {\n          for (let step = 0; step < playlist_entries.length; step++) {\n            playlist_data.push({\n              location: playlist_entries[step][\"PRIMARYKEY\"][0][\"$\"].KEY,\n              track_no: step,\n              played: \"1\"\n            });\n          }\n        }\n\n        // merge collection/playlist info\n        let tracklist_data = [\n          ...collection_data\n            .concat(playlist_data)\n            .reduce(\n              (m, o) =>\n                m.set(\n                  o.location,\n                  Object.assign(m.get(o.location) || {}, o)\n                ),\n              new Map()\n            )\n            .values()\n        ];\n\n        tracklist_data.sort(\n          (a, b) => parseFloat(a.track_no) - parseFloat(b.track_no)\n        );\n\n        // remove tracks that weren't actually played\n        let played_tracks = tracklist_data.filter(function(obj) {\n          return obj.played === \"1\";\n        });\n\n        return played_tracks;\n}\n\nfunction parseText(file) {\n\n  let data_lines = file.split(\"\\n\");\n\n  const data_formed = data_lines.map(index => {\n    return index.split(\"\\t\");\n  });\n\n  const data_split = data_formed.filter(index => index.length === 11);\n\n  data_split.shift();\n\n  let tracks = [];\n\n  for (let step = 0; step < data_split.length; step++) {\n    tracks.push({\n      artist: data_split[step][3],\n      track: data_split[step][2],\n      track_no: step\n    });\n  }\n\n  return tracks;\n}\n\nexport {parseNML, parseText}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./app\";\nimport \"./index.css\";\nimport \"./custom.css\";\nimport \"typeface-work-sans\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}